#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2022 Osiris Alejandro Gomez <osiux@osiux.com>
# Copyright (C) 2022 Osiris Alejandro Gomez <osiris@gcoop.coop>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC1090
# shellcheck source=/dev/null
# shellcheck disable=SC2043
# shellcheck disable=SC2016
# shellcheck disable=SC2028
# shellcheck disable=SC2034
# shellcheck disable=SC2046
# shellcheck disable=SC2086
# shellcheck disable=SC2181

defaults ()
{

RED="$(tput setaf 196)"
GREEN="$(tput setaf 46)"
DIR_BIN="$(dirname "$0")"
DIR_REAL="$(realpath "$DIR_BIN")"
DIR_BASE="$(dirname "$DIR_REAL")"
GL_CONFIG="$HOME/.gl-config"
GLAB_CONFIG="$HOME/.config/glab-cli/config.yml"
GIT_CFG='.git/config'
BIN=$(basename "$0")

[[ -n "$GL_INFO"          ]] || GL_INFO='0'
[[ -n "$ORIGIN"           ]] || ORIGIN='origin'
[[ -n "$REGEX_PROTO"      ]] || REGEX_PROTO='http[s]\?:\/\/'
[[ -n "$GIT_HOST"         ]] || GIT_HOST="$(git_remote_gethost)"
[[ -n "$CURL_DEBUG"       ]] || CURL_DEBUG='-s'
[[ -n "$GIT_NAME"         ]] || GIT_NAME="${GIT_HOST//./_}"
[[ -n "$CURL_OPTS"        ]] || CURL_OPTS="--connect-timeout 3"
[[ -n "$PROJECT_NEW_SHOW" ]] || PROJECT_NEW_SHOW=0
[[ -n "$GROUP_NEW_SHOW"   ]] || GROUP_NEW_SHOW=0
[[ -n "$PROJECT_GET_SHOW" ]] || PROJECT_GET_SHOW=0
[[ -n "$GROUP_GET_SHOW"   ]] || GROUP_GET_SHOW=0
[[ -n "$PROXY_SOCKS_SHOW" ]] || PROXY_SOCKS_SHOW=0

}

die ()
{
  printf "%s\\n" "${RED}[ERROR] $1 $NORMAL" && exit 1
}

log ()
{
  local NOW
  NOW="$(date +'%F %T')"
  printf "%s\\n" "${NORMAL}${NOW} [INFO] $1 $NORMAL"
}

log_send_file()
{
  MAX_COLS="$(tput cols)"
  echo "SEND $1 to $GL_CFG_HOST *****"
}

success ()
{
  printf "%s\\n" "${GREEN}[OK] $1 $NORMAL" && exit 0
}

gl_info ()
{
  [[ "$GL_INFO" -eq 1 ]] && stderror "$1"
}

stderror ()
{
  echo >&2 "$1"
}

config()
{

[[ -e "$GL_CONFIG"   ]] || die "NOT FOUND FILE: $GL_CONFIG"
[[ -e "$GLAB_CONFIG" ]] || die "NOT FOUND FILE: $GLAB_CONFIG"

eval $(sed '/:/!d;/^ *#/d;s/:/ /;' < "$GL_CONFIG" | while read -r k v
do
    str="$k='$v'"
    echo "$str"
done)

}

check_dependencies()
{

for i in awk curl glab jq
do
  command -v "$i" >/dev/null || die "try: install $i "
done

}

git_remote_geturl()
{
  git remote get-url "$ORIGIN" | sed 's/[a-z\-]\+:[a-zA-Z0-9_\-]\+@//g'
}

git_remote_gethost()
{

git-remote-geturl "$ORIGIN" \
  | sed "s/$REGEX_PROTO//g" \
  | sed 's/git@//g'         \
  | tr ':' '/'              \
  | cut -d '/' -f1

}

function proxy_socks_show()
{

  if [[ "$GL_PROXY_SOCKS_ENABLED" -eq 1 ]]
  then
    [[ "$PROXY_SOCKS_SHOW" -eq 1 ]] \
      && stderror "USING PROXY SOCKS $CURL_SOCKS"
  fi

}

glab_token()
{

local YQ=".hosts[\"$GIT_HOST\"].token"
GLAB_TOKEN="$(yq -r "$YQ" "$GLAB_CONFIG")"

[[ -z "$GLAB_TOKEN" ]] \
  && die "UNDEFINED TOKEN FOR $GIT_HOST IN $GLAB_CONFIG"

GL_URL_API="https://private-token:$GLAB_TOKEN@$GIT_HOST/api/v4"

[[ -z "$HTTP_PROXY"        ]] || stderror "Using HTTP_PROXY=$HTTP_PROXY"

CURL_SOCKS=''
if [[ "$GL_PROXY_SOCKS_ENABLED" -eq 1 ]]
then
  CURL_SOCKS="--socks5 $GL_PROXY_SOCKS_HOST:$GL_PROXY_SOCKS_PORT"
fi

}

function validate_issue()
{

  # ISSUE_ID="6"
  # ISSUE_ID="osiux/gitlab-bash-utils#6"
  #
  # ISSUE_ID="REPO_NAMESPACE#ISSUE_NUMBER"
  #
  # ISSUE_ID="[a-zA-Z0-9_/\-]?[#]?[0-9]+$"
  #
  # ISSUE_NUMBER="6"
  #
  # REPO_NAMESPACE="osiux/gitlab-bash-utils"

  [[ -n "$VALIDATE_ISSUE" ]] || VALIDATE_ISSUE="$1"
  [[ -z "$VALIDATE_ISSUE" ]] && die "EMPTY VALIDATE_ISSUE ID"

  REPO="$(echo "$VALIDATE_ISSUE" | grep -Eo '^[a-zA-Z0-9_/\-]+#')"
  ISSUE_ID="$(echo "$VALIDATE_ISSUE" | grep -Eo '[#]?[0-9/]+$')"
  ISSUE_ID="${ISSUE_ID//#/}"
  REPO="${REPO//#/}"

  [[ -z "$ISSUE_ID" ]] && die "INVALID ISSUE ID"
  [[ -z "$REPO"     ]] || REPO="-R $REPO"

}

function default_assignee()
{

HOST_DEFAULT_ASSIGNEE="GL_${GIT_NAME^^}_DEFAULT_ASSIGNEE"

GL_HOST_DEFAULT_ASSIGNEE="${!HOST_DEFAULT_ASSIGNEE}"
gl_info "GET HOST_DEFAULT_ASSIGNEE FOR $GIT_NAME USING $HOST_DEFAULT_ASSIGNEE WITH $GL_HOST_DEFAULT_ASSIGNEE"

[[ -z "$GL_HOST_DEFAULT_ASSIGNEE" ]] \
  || GL_DEFAULT_ASSIGNEE="$GL_HOST_DEFAULT_ASSIGNEE"

[[ -z "$GL_DEFAULT_ASSIGNEE"      ]] \
  && GL_DEFAULT_ASSIGNEE="$USERNAME"

gl_info "SET DEFAULT_ASSIGNEE $GL_DEFAULT_ASSIGNEE FOR $GIT_HOST"

}

function proxy_enable()
{

HOST_PROXY_HTTP_ENABLED="GL_${GIT_NAME^^}_PROXY_HTTP_ENABLED"
GL_HOST_PROXY_HTTP_ENABLED="${!HOST_PROXY_HTTP_ENABLED}"

[[ "$GL_HOST_PROXY_HTTP_ENABLED" -eq 1 ]] \
  && GL_PROXY_HTTP_ENABLED="$GL_HOST_PROXY_HTTP_ENABLED"

[[ "$GL_PROXY_HTTP_ENABLED" -eq 0 ]] && return

HOST_PROXY_HTTP_PORT="GL_${GIT_NAME^^}_PROXY_HTTP_PORT"
GL_HOST_PROXY_HTTP_PORT="${!HOST_PROXY_HTTP_PORT}"

[[ -z "$GL_HOST_PROXY_HTTP_PORT" ]] \
  || GL_PROXY_HTTP_PORT="${!HOST_PROXY_HTTP_PORT}"

HOST_PROXY_HTTP_HOST="GL_${GIT_NAME^^}_PROXY_HTTP_HOST"
GL_HOST_PROXY_HTTP_HOST="${!HOST_PROXY_HTTP_HOST}"

[[ -z "$GL_HOST_PROXY_HTTP_HOST" ]] \
  || GL_PROXY_HTTP_HOST="${!HOST_PROXY_HTTP_HOST}"

[[ -z "$GL_PROXY_HTTP_HOST" ]] && die "EMPTY GL_PROXY_HTTP_HOST"
[[ -z "$GL_PROXY_HTTP_PORT" ]] && die "EMPTY GL_PROXY_HTTP_PORT"

HTTP_PROXY="http://$GL_PROXY_HTTP_HOST:$GL_PROXY_HTTP_PORT"

gl_info "USING HTTP_PROXY $HTTP_PROXY FOR $GIT_HOST"
export http_proxy="$HTTP_PROXY"
export https_proxy="$HTTP_PROXY"

}

function proxy_disable()
{

unset http_proxy
unset https_proxy

}

read_alias()
{

source "$DIR_REAL/gl-src-alias"

}

markdown()
{
cat << EOF
---
fontsize: 8pt
code-block-font-size: 8pt
classoption: landscape
---
EOF
}

code()
{
  printf "\\n\\n%s\\n\\n" '```'
}

title1()
{
  printf "\\n# %s\\n\\n" "$1"
}

title2()
{
  printf "\\n## %s\\n\\n" "$1"
}

title3()
{
  printf "\\n### %s\\n\\n" "$1"
}

get_file_list()
{
  local DIR
  DIR='.'

  [[ -z "$1" ]] && exit 1
  [[ -n "$2" ]] && DIR="$2"

  find -L "$DIR" -type f -iname "$1" | while read -r FILE
  do
    echo "$FILE"
  done

}

glab_cfg_get()
{
  grep "$1" "$HOME/.gitlab.cfg" | cut -d= -f2 | tr -d ' '
}

filelist_total()
{
  local TOTAL

  TOTAL="$(wc -l "$1" | cut -d' ' -f1)"
  printf "found %s %s\\n" "$TOTAL" "$2"
}

jq_yq_modify()
{
  jq empty "$1" 2>/dev/null

  if [[ "$?" -eq 0 ]]
  then
    jq -r ".$2=\"$3\"" "$1" | sponge "$1"
  else
    yq -r ".$2=\"$3\"" "$1" | sponge "$1"
  fi
}

jq_modify_verbosity()
{
  [[ -e "$1" ]] || die "NOT FOUND $1"
  [[ -z "$2" ]] && die "EMPTY VERBOSITY"

  sed -i "s/\"verbosity\": .,/\"verbosity\": $2,/g" "$1"
}

function notification_user_get()
{
  local URL="$GL_URL_API/notification_settings"

  curl $CURL_SOCKS $URL                  \
    -s                                   \
    -k                                   \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN"      \
      | jq -r .
}

function notification_group_get()
{
  local GROUP_ID="$1"
  local URL="$GL_URL_API/groups/$GROUP_ID/notification_settings"

  curl $CURL_SOCKS $URL                  \
    -s                                   \
    -k                                   \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN"      \
      | jq -r .
}

function notification_group_set()
{
  local GROUP_ID="$1"
  local LEVEL='mention'

  [[ -z "$2" ]] || LEVEL="$2"
  local URL="$GL_URL_API/groups/$GROUP_ID/notification_settings?level=$LEVEL"

  curl $CURL_SOCKS $URL                  \
    -s                                   \
    -k                                   \
    -X "PUT"                             \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN"      \
      | jq -r .
}

function project_upload()
{
  local JSON

  [[ -z "$1" ]] && die "EMPTY PROJECT_ID"
  [[ -z "$2" ]] && die "EMPTY FILENAME"

  local URL="$GL_URL_API/projects/$1/uploads"

  JSON="$(mktemp)"
  TMP="$(mktemp)"

  curl $CURL_SOCKS $URL             \
    --no-progress-meter             \
    -k                              \
    -X "POST"                       \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN" \
    --form "file=@$2"               >"$JSON" 2>"$TMP" || die "UPLOAD FAILED $(cat "$TMP")"

  jq -r .markdown "$JSON"

  rm -f "$JSON"
  rm -f "$TMP"
}

function safe_url()
{
  local URL
  URL="${1#*@}"
  URL="${URL%%/*}"
  echo "$URL"
}

function project_protected_branches()
{
  local JQ JSON PROJECT_ID URL

  PROJECT_ID="$1"

  URL="$GL_URL_API/projects/$PROJECT_ID/protected_branches"
  JSON="$(mktemp)"

  stderror "SHOW PROTECTED BRANCHES FROM $(safe_url "$URL")"
  proxy_socks_show

  curl $CURL_DEBUG $CURL_OPTS $CURL_SOCKS $URL \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN"            > "$JSON"

  jq -r . "$JSON"
  rm -f "$JSON"
}

function project_protect_branch()
{
  local BRANCH JQ JSON PROJECT_ID URL

  PROJECT_ID="$1"
  BRANCH="$2"

  ACCESS="name=$BRANCH&push_access_level=$GL_ACCESS_DEVELOPER"
  ACCESS+="&merge_access_level=$GL_ACCESS_DEVELOPER"
  ACCESS+="&unprotect_access_level=$GL_ACCESS_MAINTAINER"

  URL="$GL_URL_API/projects/$PROJECT_ID/protected_branches?$ACCESS"
  JSON="$(mktemp)"

  stderror "SET PROTECTED BRANCHES FROM $(safe_url "$URL")"
  proxy_socks_show

  JQ='.'

  curl $CURL_DEBUG $CURL_OPTS $CURL_SOCKS $URL \
    -X POST                                    \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN"            > "$JSON"

  MSG="$(jq -r .message "$JSON")"

  if [[ "$MSG" = "Protected branch 'develop' already exists" ]]
  then
    echo project_unprotect_branch "$PROJECT_ID" 'develop'
  fi

  jq -r "$JQ" "$JSON"
}

function project_issues()
{
  local PROJECT_ID JQ JSON URL

  PROJECT_ID="$1"
  URL="$GL_URL_API/projects/$PROJECT_ID/issues"
  JSON="$(mktemp)"

  stderror "GET ISSUES FROM $(safe_url "$URL")"
  proxy_socks_show

  curl $CURL_DEBUG $CURL_OPTS $CURL_SOCKS $URL  \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN"             \
    -H "Content-Type: application/json"         \
    | jq -r "$JQ"                               > "$JSON"

  jq -r . "$JSON"
}

function project_get()
{
  local PROJECT JQ JSON URL

  PROJECT="$1"
  URL="$GL_URL_API/projects?search=$PROJECT"
  JSON="$(mktemp)"

  stderror "GET PROJECT $PROJECT FROM $(safe_url "$URL")"
  proxy_socks_show

  JQ=".[] | select(.name == \"$PROJECT\")"

  curl $CURL_DEBUG $CURL_OPTS $CURL_SOCKS $URL  \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN"             \
    -H "Content-Type: application/json"         \
    | jq -r "$JQ"                               > "$JSON"

  # RETURN WHEN JSON IS EMPTY
  [[ -s "$JSON" ]] || return 0

  PROJECT_ID="$(jq -r .id "$JSON")"
  echo "$PROJECT_ID"

  [[ "$PROJECT_GET_SHOW" -eq 1 ]] && >&2 jq -r . "$JSON"

  rm -f "$JSON"
}

function group_get()
{
  local GROUP JQ JSON URL

  GROUP="$1"
  URL="$GL_URL_API/groups?search=$GROUP"
  JSON="$(mktemp)"

  stderror "GET GROUP $GROUP FROM $(safe_url "$URL")"
  proxy_socks_show

  JQ=".[] | select(.name == \"$GROUP\")"

  curl $CURL_DEBUG $CURL_OPTS $CURL_SOCKS $URL  \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN"             \
    -H "Content-Type: application/json"         \
    | jq -r "$JQ"                               > "$JSON"

  # RETURN WHEN JSON IS EMPTY
  [[ -s "$JSON" ]] || return 0

  GROUP_ID="$(jq -r .id "$JSON")"
  echo "$GROUP_ID"

  [[ "$GROUP_GET_SHOW" -eq 1 ]] && >&2 jq -r . "$JSON"

  rm -f "$JSON"
}

function project_list()
{

  local PAGE=1
  [[ -n "$1" ]] && PAGE="$1"
  local URL="$GL_URL_API/projects?page=$PAGE&per_page=100&membership=true"

  JSON="gitlab-projects-${PAGE}.json"

  curl $CURL_SOCKS $URL                  \
    -s                                   \
    -k                                   \
    -H "PRIVATE-TOKEN: $GLAB_TOKEN"      \
      | jq -r . > "$JSON" && project_filter_list "$JSON"

}

function project_filter_list()
{

  local JSON="$1"

  [[ -e "$JSON" ]] || die "NOT FOUND FILE $JSON"

  JQ="\(.id) \(.path_with_namespace) \(.ssh_url_to_repo) \(.description)"

  jq -r '.' "$JSON" | jq -r ".[] | \"$JQ\""

}

function clean_title()
{
  echo "$1" | tr '"' "'" | sed 's/\x1B\[[0-9;]*[JKmsu]//g'
}

function remote_get_url()
{
  local ORIGIN='origin'
  [[ -z "$1" ]] || ORIGIN="$1"

  git remote get-url --all "$ORIGIN"        \
   | head -1                                \
   | sed 's/[a-z\-]\+:[a-zA-Z0-9_\-]\+@//g' \
   | sed 's/\.git$//g'
}

function main()
{

  defaults
  check_dependencies
  config
  glab_token
  read_alias

}

main "$@"
