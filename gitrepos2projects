#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2022 Osiris Alejandro Gomez <osiux@osiux.com>
# Copyright (C) 2022 Osiris Alejandro Gomez <osiris@gcoop.coop>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC1090
# shellcheck source=/dev/null
# shellcheck disable=SC2116

DIR_BIN="$(dirname "$0")" && source "$DIR_BIN/gl-src-common"

function usage()
{
cat << EOF

## \`$BIN\` Create /projects/ from \`.git-repos\`

### Usage

\`\`\`bash

  $BIN GIT_REPOS

\`\`\`

### Example

\`\`\`bash

  $BIN .git-repos

\`\`\`

EOF
exit 0
}

[[ "$1" =~ ^[-]+(h|help) ]] && usage

[[ -z "$1"          ]] || GIT_REPOS="$1"
[[ -n "$GIT_REPOS"  ]] || GIT_REPOS='.git-repos'
[[ -z "$GIT_REPOS"  ]] && die "EMPTY GIT_REPOS"
[[ -e "$GIT_REPOS"  ]] || die "NOT FOUND FILE $GIT_REPOS"
[[ -d "$GIT_REPOS"  ]] && die "INVALID $GIT_REPOS"

if [[ -n "$GIT_PARENT" ]]
then
  GIT_PARENT_ID="$(group_get "$GIT_PARENT")"
  [[ -z "$GIT_PARENT_ID" ]] && die "NOT FOUND GROUP ID FOR $GIT_PARENT"
else
  [[ -z "$2" ]] || GIT_PARENT="$2"
  GIT_PARENT_ID="$(group_get "$GIT_PARENT")"
fi

[[ -z "$GIT_PARENT_ID" ]] && die "EMPTY GIT_PARENT_ID"

stderror "USING $GIT_PARENT AS PARENT GROUP WITH ID $GIT_PARENT_ID"

TMP1="$(mktemp)"

grep -v '\#' "$GIT_REPOS" | sed 's/^$//g' > "$TMP1"

while read -r DIR _
do

  LEVEL="$(echo "$DIR" | grep -Eo '/' | wc -c)"
  [[ "$LEVEL" -gt 0 ]] && LEVEL="$((LEVEL-1))"

  PROJECT="$(echo "$DIR" | rev | cut -d/ -f1 | rev)"
  GROUP="$(echo "$DIR" | rev | cut -d/ -f2 | rev)"

  GROUP_ID="$GIT_PARENT_ID"
  [[ "$LEVEL" -ne 0 ]] && GROUP_ID="$(group_get "$GROUP")"

  PROJECT_ID="$(project_new "$PROJECT" "$GROUP_ID")"
  stderror "CREATE PROJECT $PROJECT IN GROUP $GROUP WITH ID $PROJECT_ID"

done < "$TMP1"

rm -f "$TMP1"
