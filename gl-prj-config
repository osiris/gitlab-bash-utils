#! /bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2022 Osiris Alejandro Gomez <osiux@osiux.com>
# Copyright (C) 2022 Osiris Alejandro Gomez <osiris@gcoop.coop>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC1090
# shellcheck disable=SC2086

DIR_BIN="$(dirname "$0")" && source "$DIR_BIN/gl-src-common"

function usage()
{
cat << EOF

## \`$BIN\` Apply project settings defined in \`~/.gl-config\`

### Usage

\`\`\`bash

  $BIN GL_PROJECT_ID

\`\`\`

### Defaults

| variable                                                     | value |
|--------------------------------------------------------------|-------|
| GL_PROJECT_ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS             | true  |
| GL_PROJECT_MERGE_REQUESTS_ENABLED                            | true  |
| GL_PROJECT_ALLOW_MERGE_ON_SKIPPED_PIPELINE                   | false |
| GL_PROJECT_ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED  | true  |

### Example

\`\`\`bash

  $BIN 34078674

  {
    "only_allow_merge_if_pipeline_succeeds": true,
    "merge_requests_enabled": true,
    "allow_merge_on_skipped_pipeline": false,
    "only_allow_merge_if_all_discussions_are_resolved": true
  }

\`\`\`

EOF
exit 0
}

[[ "$1" =~ ^[-]+(h|help) ]] && usage

[[ -z "$1"                 ]] && die "EMPTY GL_PROJECT_ID"
GL_PROJECT_ID="$1"
[[ -z "$GL_PROJECT_ID" ]] && die "EMPTY GL_PROJECT_ID"

GL_REPO_CONFIG=$(cat <<EOF
{
  "only_allow_merge_if_pipeline_succeeds": $GL_PROJECT_ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS,
  "merge_requests_enabled": $GL_PROJECT_MERGE_REQUESTS_ENABLED,
  "allow_merge_on_skipped_pipeline": $GL_PROJECT_ALLOW_MERGE_ON_SKIPPED_PIPELINE,
  "only_allow_merge_if_all_discussions_are_resolved": $GL_PROJECT_ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED
}
EOF
)

JSON="$(mktemp)"
echo "$GL_REPO_CONFIG" > "$JSON"

stderror "GL_REPO_CONFIG: $JSON"
jq -r . "$JSON" || die "INVALID JSON $JSON"

curl $CURL_SOCKS "$GL_URL_API/projects/$GL_PROJECT_ID" \
  -k                                                           \
  -s                                                           \
  -X PUT                                                       \
  -H "PRIVATE-TOKEN: $GL_TOKEN_PASS"                       \
  -H "content-type:application/json"                           \
  -d "@$JSON"                                                  \
    | jq -r .
